chpwd_profile_common()() {
	[[ ${profile} == ${CHPWD_PROFILE} ]] && return 1
	print "Switching to profile: $profile"
	return 0
}

chpwd_profile_work() {
	chpwd_profile_common || return 1

	export DEBEMAIL="otavio@ossystems.com.br"
	export EMAIL="Otavio Salvador <$DEBEMAIL>"
	export GIT_AUTHOR_EMAIL="$DEBEMAIL"
	export GIT_COMMITTER_EMAIL="$DEBEMAIL"
	export GIT_COMMITTER_NAME="Otavio Salvador"
}

chpwd_profile_debian() {
	chpwd_profile_common || return 1

	export DEBEMAIL="otavio@debian.org"
	export EMAIL="Otavio Salvador <$DEBEMAIL>"
	export GIT_AUTHOR_EMAIL="$DEBEMAIL"
	export GIT_COMMITTER_EMAIL="$DEBEMAIL"
	export GIT_COMMITTER_NAME="Otavio Salvador"
}

keys-load() {
	if [ -z "$1" ]; then
		unset SSH_AUTH_SOCK
		echo Decriptando particao... && \
			 sudo cryptsetup -v luksOpen /dev/disk/by-uuid/faae5ddb-df82-4a23-8a24-eedd6356ccff keys && \
			 sudo mount /dev/mapper/keys /mnt && \
			 echo done

		echo Carregando chave SSH ...
		DISPLAY='' keychain id_rsa
	fi

	[ -f $HOME/.keychain/$(hostname)-sh ] && \
		source $HOME/.keychain/$(hostname)-sh
	[ -f $HOME/.keychain/$(hostname)-sh-gpg ] && \
		source  $HOME/.keychain/$(hostname)-sh-gpg
}

keys-close() {
    echo Descarregando chave SSH
    keychain --stop mine
    echo -n Desligando particao encriptada... && \
	sudo umount /mnt > /dev/null ; \
	sudo cryptsetup -v luksClose keys && \
	echo done
}

sync-machine() {
	local dest=$1

	if [ ! -e $HOME/.unison/$dest.prf ]; then
		echo "Machine couldn't be found. The know ones are:"
		ls $HOME/.unison/*.prf -1 | sed "s,$HOME/.unison/, - ,g;s,.prf,,g"
		return
	fi

	(cd && unison $dest ~/ ssh://$dest && scp .unison/*.prf $dest:.unison/)
}

gen_password() {
	pwgen -s 20 1
}

host=
if [ "$SSH_TTY" ]; then
	host="%m:"
fi

promptcolor=
if [ "$EUID" = 0 ]; then
	promptcolor=red
else
	promptcolor=yellow
fi

### from zshrc.template
# Virtualenv support

function virtual_env_prompt () {
    REPLY=${VIRTUAL_ENV+(${VIRTUAL_ENV:t}) }
}
grml_theme_add_token  virtual-env -f virtual_env_prompt '%F{magenta}' '%f'
zstyle ':prompt:grml:left:setup' items rc virtual-env change-root user at host path vcs percent

## ctrl-s will no longer freeze the terminal.
stty erase "^?"

zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh_cache
zstyle ':chpwd:profiles:'${HOME}'/hacking/debian(|/|/*)' profile debian
zstyle ':chpwd:profiles:'${HOME}'(|/|/*)'                profile work

chpwd_profiles

keys-load "not-ask"

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
[[ -s "$HOME/src/ye/ye-cd" ]] && source "$HOME/src/ye/ye-cd"

if type ruby > /dev/null && [ -n "$(ruby -e 'print Gem.user_dir')" ]; then
	export PATH="$(ruby -e 'print Gem.user_dir')/bin:$PATH"
	export GEM_HOME=$(ruby -e 'print Gem.user_dir')
fi

source ~/.environment
[[ -s ~/.cargo/env ]] && source ~/.cargo/env

# ls
if type exa > /dev/null; then
    alias ls='exa'
    alias ll='exa -l'
    alias lll='exa -l | less'
    alias lla='exa -la'
    alias llt='exa -T'
    alias llfu='exa -bghHliS --git'
fi

# bat
type bat > /dev/null && alias cat='bat'

export GOPATH=~/go
export GOBIN=$GOPATH/bin
mkdir -p $GOBIN $GOPATH/src
export PATH="$PATH:$GOBIN"

alias tb="nc termbin.com 9999"
alias mux="tmuxinator"

setopt HIST_IGNORE_DUPS

autoload -Uz promptinit
promptinit
prompt grml-large
zstyle ':prompt:grml-large:left:setup' items rc shell-level change-root ofversion user at host path vcs newline percent

# Base16 Shell
BASE16_SHELL="$HOME/.base16-shell/scripts/base16-default-dark.sh"
[[ -s $BASE16_SHELL ]] && source $BASE16_SHELL

[[ -e /usr/share/fzf/key-bindings.zsh ]] && source /usr/share/fzf/key-bindings.zsh

## define word separators (for stuff like backward-word, forward-word, backward-kill-word,..)
#WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>' # the default
#WORDCHARS=.
#WORDCHARS='*?_[]~=&;!#$%^(){}'
#WORDCHARS='${WORDCHARS:s@/@}'

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

transfer() {
    curl --version 2>&1 > /dev/null
    if [ $? -ne 0 ]; then
	echo "Could not find curl."
	return 1
    fi

    # check arguments
    if [ $# -eq 0 ];
    then
	echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
	return 1
    fi

    # get temporarily filename, output is written to this file show progress can be showed
    tmpfile=$( mktemp -t transferXXX )

    # upload stdin or file
    file=$1

    if tty -s;
    then
	basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

        if [ ! -e $file ];
	then
	    echo "File $file doesn't exists."
	    return 1
	fi

        if [ -d $file ];
	then
	    # zip directory and transfer
	    tgzfile=$( mktemp -t transferXXX.tgz )
	    cd $(dirname $file) && tar czf $tgzfile $(basename $file)
	    curl --progress-bar --upload-file "$tgzfile" "https://up.sceptique.eu/$basefile.tgz" >> $tmpfile
	    rm -f $tgzfile
	else
	    # transfer file
	    curl --progress-bar --upload-file "$file" "https://up.sceptique.eu/$basefile" >> $tmpfile
	fi
    else
	# transfer pipe
	curl --progress-bar --upload-file "-" "https://up.sceptique.eu/$file" >> $tmpfile
    fi

    # cat output link
    cat $tmpfile
    echo

    # cleanup
    rm -f $tmpfile
}

source ~/.bitbake-completion/*_completion
